import numpy as np

# task 1
# ques 1
arr=np.arange(1,11)
print(arr)
# [ 1  2  3  4  5  6  7  8  9 10]

arr2=np.arange(1,10).reshape(3,3)
print(arr2)
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]

arr3=np.random.random(size=(3,5,3))
print(arr3)
# [[[0.37550283 0.89637648 0.02801665]
#   [0.10101921 0.15443026 0.79909556]
#   [0.92991832 0.86846787 0.69527766]
#   [0.41522553 0.08196173 0.13370167]
#   [0.20847126 0.41797846 0.51374424]]

#  [[0.47962476 0.68067453 0.18764465]
#   [0.26378404 0.03075869 0.95752238]
#   [0.3211857  0.24046263 0.9570504 ]
#   [0.30855842 0.99844251 0.90493677]
#   [0.84707436 0.35000428 0.66243189]]

#  [[0.34062694 0.23012177 0.27419461]
#   [0.3256383  0.59582267 0.01388734]
#   [0.14976521 0.9679146  0.20376094]
#   [0.84611591 0.69902091 0.33217002]
#   [0.0759029  0.78350941 0.77773502]]]

# ques 2
print(arr.shape,arr.size,arr.dtype)
print(arr2.shape,arr2.size,arr2.dtype)
print(arr3.shape,arr3.size,arr3.dtype)
# (10,) 10 int64
# (3, 3) 9 int64
# (3, 5, 3) 45 float64

# task2
# ques 1
data = [10, 20, 30, 40, 50, 60, 70, 80, 90] 
arr=np.array(data)
print(arr,type(arr)) 
# [10 20 30 40 50 60 70 80 90] <class 'numpy.ndarray'>

# ques 2
print(arr[:3])
# [10 20 30]
print(arr[::2])
# [10 30 50 70 90]
print(arr[::-1])
# [90 80 70 60 50 40 30 20 10]

# ques 3===> results are already displayed in the above code

# task 3
# ques 1
a=np.random.randint(1, 20,size=5)
b=np.random.randint(1, 20,size=5)
print(a)
print(b)

# ques 2
print(a+b)
print(a-b)
print(a*b)
print(a/b)
print(np.dot(a,b))
print(np.mean(a))
print(np.std(a))
print(np.var(a))
print(np.median(a))
print(np.min(a),np.argmin(a))
print(np.max(a),np.argmax(a))
# [ 4 15  7  7 15]
# [ 6  4 17 14  4]
# [10 19 24 21 19]
# [ -2  11 -10  -7  11]
# [ 24  60 119  98  60]
# [0.66666667 3.75       0.41176471 0.5        3.75      ]
# 361
# 9.6
# 4.5431266766402185
# 20.639999999999997
# 7.0
# 4 0
# 15 1

# task 4
# ques 1
arr= np.arange(1,13)
print(arr)
# [ 1  2  3  4  5  6  7  8  9 10 11 12]

# ques 2
d2=arr.reshape(4,3)
print(d2)
d3=arr.reshape(2,2,3)
print(d3)
d2transpose=d2.T
print(d2transpose,d2transpose.shape)

# [ 1  2  3  4  5  6  7  8  9 10 11 12]
# [[ 1  2  3]
#  [ 4  5  6]
#  [ 7  8  9]
#  [10 11 12]]
# [[[ 1  2  3]
#   [ 4  5  6]]

#  [[ 7  8  9]
#   [10 11 12]]]
# [[ 1  4  7 10]
#  [ 2  5  8 11]
#  [ 3  6  9 12]] (3, 4)

# task 5
# ques 1
arr=np.random.randint(10,51,size=15)
print(arr)

# ques 2
print(arr[arr>25])
arr[arr>25]=0
print(arr)
print(np.sum(arr%5==0))
# [24 15 36 35 41 33 43 12 36 37 35 45 29 16 14]
# [36 35 41 33 43 36 37 35 45 29]
# [24 15  0  0  0  0  0 12  0  0  0  0  0 16 14]
# 11

# task 6
# ques 1
arr=np.linspace(0,1,10)
print(arr)
# [0.         0.11111111 0.22222222 0.33333333 0.44444444 0.55555556
#  0.66666667 0.77777778 0.88888889 1.        ]

mat=np.eye(4,4)
print(mat)
# [[1. 0. 0. 0.]
#  [0. 1. 0. 0.]
#  [0. 0. 1. 0.]
#  [0. 0. 0. 1.]]

arr=np.random.randint(1,101,20)
print(arr)
# [17 80 90 65 30 56  5 77 75 62 80 20 75 85 91  1 73  1 82 87]
arr.sort()
print(arr)
# [ 1  1  5 17 20 30 56 62 65 73 75 75 77 80 80 82 85 87 90 91]
print(arr[-5:])
# [82 85 87 90 91]

# task 7
# ques 1
import time
a=np.random.rand(100,100)
b=np.random.rand(100,100)
print(a)
print(b)

start=time.time()
mat=np.dot(a,b)
print(a)

det=np.linalg.det(mat)
print(det)

inverse=np.linalg.inv(mat)
print(inverse)

end=time.time()
total_time=end-start
print(f'time taken: {total_time:.6f}')

# [[0.3433237  0.93592259 0.38446819 ... 0.51812688 0.90964021 0.97760933]
#  [0.81252202 0.73669467 0.07578891 ... 0.60564786 0.27175428 0.36085916]
#  [0.99173281 0.18202603 0.9305709  ... 0.52978189 0.88263837 0.76807615]
#  ...
#  [0.00237861 0.71229508 0.18794993 ... 0.03006735 0.08965219 0.50238083]
#  [0.30130398 0.72763947 0.78674201 ... 0.86700609 0.41674393 0.57107725]
#  [0.95084261 0.0264719  0.51825737 ... 0.59864353 0.83860692 0.52292042]]

# [[0.31511772 0.76219991 0.4351205  ... 0.46382023 0.35719379 0.6998561 ]
#  [0.10803007 0.9266531  0.41713432 ... 0.0149736  0.69297578 0.01242368]
#  [0.71568016 0.66817111 0.19990481 ... 0.56479709 0.40979988 0.43205727]
#  ...
#  [0.67600708 0.95923616 0.48746182 ... 0.93994813 0.0604458  0.6399531 ]
#  [0.63845763 0.96601855 0.66860699 ... 0.20205291 0.15180365 0.8226503 ]
#  [0.03274448 0.47901624 0.54617622 ... 0.83082867 0.30201034 0.31911099]]

# [[0.3433237  0.93592259 0.38446819 ... 0.51812688 0.90964021 0.97760933]
#  [0.81252202 0.73669467 0.07578891 ... 0.60564786 0.27175428 0.36085916]
#  [0.99173281 0.18202603 0.9305709  ... 0.52978189 0.88263837 0.76807615]
#  ...
#  [0.00237861 0.71229508 0.18794993 ... 0.03006735 0.08965219 0.50238083]
#  [0.30130398 0.72763947 0.78674201 ... 0.86700609 0.41674393 0.57107725]
#  [0.95084261 0.0264719  0.51825737 ... 0.59864353 0.83860692 0.52292042]]

# -1.5067979587704548e+49

# [[ -10.40852546   -0.49090269  -15.86545651 ...   12.0327323
#     30.91933192   10.48422105]
#  [-105.73328122   -9.24911394 -156.66160236 ...  123.14420867
#    306.0848483   104.99809853]
#  [-132.39994138  -10.8002245  -197.39292362 ...  153.25488117
#    385.86393834  131.81370533]
#  ...
#  [ -60.09742119   -6.01119194  -88.66599496 ...   69.90547073
#    172.61433578   59.45403385]
#  [ -58.86344149   -4.8588025   -88.38037632 ...   67.99315215
#    171.54340981   57.99616088]
#  [ -37.9813778    -2.54937536  -57.37370488 ...   44.75779807
#    112.94413459   37.97804801]]

# time taken: 0.025001